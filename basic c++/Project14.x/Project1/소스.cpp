//좋은 프로그래머라면 정상적인 상황에서 기능을 잘 작동하는것 뿐 아니라 비 정상적인 상황, 예외적인 상황에서도 안정적으로 작동하는 프로그램을 만들 수 있어야 겠죠
//여기서는 예외처리 기본에 대해서 알려드리겠습니다.
#include<iostream>
#include<fstream>

using namespace std;

//1 보통적으로 프로그램이 잘 돌아가는지 체크하는 방법에 대해 알아봅시다. 우리가 보통 함수를 만드는데 그 함수가 정상적으로 작동하는지 아니면 문제가 있는건지
//확인할 방법이 있어야 하죠 대부분의 함수는 그 함수의 입력으로 들어가는거에 대해서 이 함수가 잘 작동할지 작동하지 않을지 대강 예측을 할 수 있습니다.
//컴파일타임, 디버그하기전에 미리 준비하는 방식으로는 assert 가 있고 그외에는 프로그래밍 트릭이 있을겁니다. 
//트릭같은경우 아래코드같은 경우에는 배열은 0부터 시작이니까 마이너스 값이 절때 나올수 없죠?
//만약 정상정인 매치가 없다면 정상적으로 나올수 없는 마이너스 -1 를 리턴해주는것을 알수 있죠
//요런 방식도 실제로 많이 사용합니다.
//그런데 아래같은 경우에는 프로그래머가 "아 -1이 비정상적인 방법으로 끝났다는 거구나" 라고 알아야하는 번거러움이 있죠
int finedFirstChar(const char* string, char ch) {
	for (int c = 0; c < strlen(string); ++c)
		if (string[c] == ch)
			return c;
	return -1;
}

//2 위 예제는 x를 y로 나누는 사례인데 y가 0일경우에는 나누기를 할수 없죠? 그러니까 나누기를 할수 있는지 할수없는지 확인을 시켜줘야하기때문에 불타입 succes를 만들어 줬습니다.
double divide(int x, int y, bool& succes) {
	if (y == 0) {
		succes = false;
		return 0.0;
	}

	succes = true;
	return static_cast<double>(x) / y;
}

int main() {
	bool succes;
	double result = divide(5, 3, succes);

	if (!succes)
		cout << "succes X" << endl;
	else
		cout << "Result is " << result << endl;
	//3 이렇게 함수가 정상적으로 작동했는지 안했는지 판별해주는 도와주는 기능을 추가로 넣어줄때도 있고요

	ifstream input_file("temp.txt");
	if (!input_file)
		cout << "file error" << endl;
	//4 어떤경우는 변수자체가 초기화가 됬는지 안됬는지 낫오퍼레이터(!)로 판별해줄때도 있기도 합니다.
	//어떤경우에는 함수의 리턴값을 bool값으로 해서 구분할수도 있겠죠?

	//5위처럼 트릭으로 만들면 아무래도 깔끔하지 않다라는 측면이 있는데 그럼에도 불과하고 정통적인 c 프로그래밍에서는 이런 방식으로 프로그래밍을 많이 해왔습니다.
	//몇가지 이유로 1. 퍼포먼스 때문에 2. 다른 대체할수 있는 문법같은게 없었기 때문
	
	//지금부터 설명해드릴 예외처리는 관점이 약간 다릅니다.
	//오해하실까봐 말씀드리는데 try, catch, throw로 이루어진 예외처리는 얘네들을 완전히 대채할려는것은 아닙니다.
	//문법적으로 깔끔하고 우아해보이는것은 사실인데 예외처리를 하게되면은 느려지게 되는 측면이 있습니다.
	//그래서 퍼포먼스가 중요한 프로그램 게임같은 경우에서 느려질 가능성이 있는 부분에는 넣지 않습니다.
	//큼직큼직한 단위로 예외처리를 하는 경우가 많습니다.
	//그리고 예를들어 빅데이터가 있는데 데이터가 어떤 파일에 있다고 치고 그 파일이 있어야 하는데 그 파일을 읽지 못했다면 프로그램을 계속 진행하면 절때 안되죠?
	//그런 경우에는 에러를 나타내던지 파일선택을 다시 해주는 창을 띄어주게 하던지 등등 여러가지 작업을 할 수 있겠죠
	//그럴경우 위처럼 일반적인 프로그래밍 범위 안에서 처리하는게 보통입니다.
	
	//그럼 예외처리는 언제쓰냐
	//정말로 예측할수 없는 일이 많이 벌어지는 경우
	//게임서버같은 경우 강종같은 여러가지 일이 발생하더라도 서버는 든든하게 버텨야 하죠? 이럴때 예외처리를 사용합니다.

	//다시한번 말하지만 분야에따라 예외처리를 사용하지 않는 분야도 있습니다.
	//대신 서버처럼 예외처리를 반드시 사용해야하는 분야도 있습니다. 극과 극이 갈리는 문법이라 할 수 있습니다.




	return 0;
}