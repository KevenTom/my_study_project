//프로그래밍언어에는 프로그래머의 단순 반복적인 것을 줄여주기 위한 여러가지 장치들이 마련되어있습니다.
//그중 템플릿은 여러가지 자료형에 대해서 비슷한 코드를 반복해서 작성하는 것을 방지해줍니다.
//가장 간단한 함수 템플릿으로 템플릿을 알아봅시다.
#include<iostream>
#include"Cents.h"

using namespace std;

int getMax(int x, int y) {
	return (x > y) ? x : y;
}//1 예를들어 간단하게 수를 비교하고 높은 수를 리턴해주는 함수를 만들었다 칩시다.
//근데 만약 상사가 와서 "int 말고 double도 만들어야돼" 라고 하면

double getMax(double x, double y) {
	return (x > y) ? x : y;
}//2 다 만들었는데 float도 만들라고 해

float getMax(float x, float y) {
	return (x > y) ? x : y;
}//3 또 만들라고해 이러면 너무 반복적이죠
//지금보면 반복적인 패턴이 있다는 것을 확인하실 수 있습니다.
//이럴때 템플릿을 사용하실 수 있습니다.


template<typename T> //4 가끔 인터넷 보면 typename이 class라고 해도 크게 차이가 안나기 때문에 무서워 하지 않아도 된다
T getMax1(T x, T y) {
	return (x > y) ? x : y;
}


int main() {

	cout << getMax1(1, 2) << endl;
	cout << getMax1(3.14, 1.592) << endl;
	cout << getMax1(1.0f, 3.4f) << endl;
	cout << getMax1('a', 'c') << endl; //5 한번 여러가지 자료형을 넣어본다음 실행해 보자
									//문제없이 작동하는것을 확인할 수 있다.
									//내부적으로 어떻게 작동하는지 커서를 갖다대면 T자리에 int가 들어갈수 있다는 것을 컴파일러가 알고 있다는걸 알 수 있습니다.
									//컴파일러가 내부적으로 찾아내고 컴파일러가 알아서 다 작동해주게 했다는 것을 알 수 있습니다.
									//아주 편하죠 프로그래머가 해야할 단순 작업을 컴파일러가 대신해주는 겁니다.
									//템플릿을 사용하면 나중에 코드를 만들때 일단 템플릿으로 만들어야지 할때가 많습니다.

	cout << getMax1(Cents(5), Cents(9)) << endl; //6 또 유저가 만든 타입도 T 자리에 넣을 수 있습니다.
												//일단 출력연산자를 사용할꺼기 때문에 출력오버로딩을 해준 상태여야 한다.
												//즉 템플릿은 쓰는건 쉬운데 템플릿으로 작동하게 하려면 필요한 기능이 구현되어 있어야 합니다.

												//7 다 하면 정상적으로 작동되는것을 확인할 수 있다.
												//이처럼 템플릿은 유저가 만든 타입도 사용할수 있다 정말 편하죠?

	//8 용어에 대해 말씀드릴께 있는데 템플릿으로 만든 펑션, 클래스를 일반적인 T 말고 T를 정의해놓은 것을 특정한 데이터 타입 뭐 int라던지 double라던지 실제로 만들어
	//진것을 인스턴시에이션 이라고 부릅니다. (인스턴시에이션 단어의 사용 예시 : 추상 클래스의 가장 보편적 의미는 오브젝트를 인스턴시에이션 시키지 않는 클래스를 말한다.)
	//예를들어 위처럼 T가 int일때 int에 대한 인스턴스가 되는 거죠
	//앞에서 인스턴스란 말을 쓸때는 메모리에 실제 데이터가 갖고 존재하는 객체를 인스턴스라고 불렀는데
	//큰 범위에서는 같은 의미를 내포하고 있지만 템플릿에서의 인스턴스는 구체적으로는 살짝 다르다는것을 알수 있죠 끝



	return 0;
}